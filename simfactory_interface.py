"""
simfactory_interface.py
Author: Jonah Miller (jonah.maxwell.miller@gmail.com)
Time-stamp: <2014-03-11 12:21:09 (jonah)>

This is a small library that uses the directory structure of a cactus
simulation generated by simfactory to make things a little easier.
"""

# Imports
# ----------------------------------------------------------------------
import os # File system tools
import re # Regular expressions
# ----------------------------------------------------------------------

# Global constants
# ----------------------------------------------------------------------
RESTART_NUMBER=0
# Directories we don't want to enter
UNDESIRABLE_DIRECTORIES = ["SIMFACTORY"]
# Some useful filenames
GRID_PREFACTOR='grid::'
ADM_PREFACTOR='admbase::'
ASCII_POSTFACTOR='.asc'
METRIC_NORM2=ADM_PREFACTOR+'metric.norm2'+ASCII_POSTFACTOR
# projections along the x-axis
METRIC_XPROJ=ADM_PREFACTOR+'metric.x'+ASCII_POSTFACTOR
CURV_XPROJ=ADM_PREFACTOR+'curv.x'+ASCII_POSTFACTOR
COORDS_XPROJ=GRID_PREFACTOR+'coordinates.x'+ASCII_POSTFACTOR
PAR_FILE_POSTFACTOR=".par"
# ----------------------------------------------------------------------

def restart_dir_name(value):
    "Returns the directory name for the desired restart."
    return 'output-{0:{fill}{align}4}'.format(value,fill="0",align=">")

def get_data_directory(root_dir_name,restart_number):
    """
    Given a root directory name and the number of the restart for this
    particular simulation, generates a string containing the path to
    the directory containing the data.
    """
    # Possible directories containing files
    target_dirs = []
    # to ensure there's only one /
    path = root_dir_name.rstrip('/')+'/'+restart_dir_name(restart_number)+'/'
    # Find the name of the directory we want
    for root,dirs,files in os.walk(path):
        for directory in dirs:
            if directory not in UNDESIRABLE_DIRECTORIES:
                target_dirs.append(directory)
    assert len(target_dirs) == 1 and "There should only be 1 target directory"
    target_dir = target_dirs[0]
    path += target_dir + '/'
    return path

def get_file_paths(root_dir_name,restart_number,file_name=False):
    """
    Given a root directory name and the restart number for this
    particular simulation, generates the paths to the parameter file
    for the simulation, the metric projected along x for this
    simulation, the curvature along x for this simulation, and the
    coordinates along x for this simulation.
    """
    data_directory = get_data_directory(root_dir_name,restart_number)
    parameter_file_name = data_directory.rstrip('/').split('/')[-1] + PAR_FILE_POSTFACTOR
    parameter_path=data_directory + parameter_file_name
    coordinates_path=data_directory + COORDS_XPROJ
    metric_path=data_directory + METRIC_XPROJ
    if file_name:
        tensor_path = data_directory + file_name
    else:
        tensor_path = metric_path
    return data_directory,tensor_path,coordinates_path,parameter_path

def extract_parameter_value(parameter_file_name,parameter_name,parameter_is_number=True):
    """
    Given the name of a parameter file and the name of a parameter in it, extracts the
    numeric value of that parameter.

    If the parameter is a number, set parameter_is_number to
    true. Otherwise, set it to false.
    """
    # The file data
    with open(parameter_file_name,'r') as f:
        pardata = f.read()
    # The regular expression
    myregex = re.compile(parameter_name + ' *= *' + r'\S*')
    # Let's pattern match!
    pattern = myregex.search(pardata).group(0) # This will raise an error if no pattern is found
    # Extract the value you care about
    value = pattern.split()[-1].rstrip()
    if parameter_is_number:
        value = float(value)
    return value

if __name__=="__main__":
    raise ImportWarning("Warning! This module is a library. Do not run it. Just import it.")
